#!/bin/bash

# Exit on any error
set -e

echo "üì¶ \033[1;34mChecking version bump requirements...\033[0m"

# Check if package.json exists
if [ ! -f "package.json" ]; then
    echo -e "\033[1;31m‚ùå Error: package.json not found in current directory.\033[0m"
    exit 1
fi

# Get the last tag if it exists
LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || git rev-list --max-parents=0 HEAD)

# Fetch commit messages since the last tag
COMMIT_LOG=$(git log ${LAST_TAG}..HEAD --pretty=format:"%s" --no-merges)

# If no commits found, exit
if [ -z "$COMMIT_LOG" ]; then
    echo -e "\033[1;33m‚ö†Ô∏è  No new commits found since last version. Skipping version bump.\033[0m"
fi

# Get current version from package.json using grep and sed
VERSION=$(grep -m1 '"version":' package.json | sed -E 's/.*"version": "([^"]+)".*/\1/')

if [ -z "$VERSION" ]; then
    echo -e "\033[1;31m‚ùå Error: Failed to read version from package.json\033[0m"
fi

# Split version into components
IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"

# Validate version components are numbers
if ! [[ "$MAJOR" =~ ^[0-9]+$ ]] || ! [[ "$MINOR" =~ ^[0-9]+$ ]] || ! [[ "$PATCH" =~ ^[0-9]+$ ]]; then
    echo -e "\033[1;31m‚ùå Error: Invalid version format in package.json: $VERSION\033[0m"
fi

# Initialize bump type
BUMP_TYPE="patch"

# Check commit messages with improved patterns
if echo "$COMMIT_LOG" | grep -qi "^feat\([^)]*\):\|^feat:"; then
    BUMP_TYPE="minor"
    echo -e "\033[1;33müîç Found feature commit - will bump minor version\033[0m"
fi

if echo "$COMMIT_LOG" | grep -qi "BREAKING CHANGE\|^BREAKING\|^[[:space:]]*BREAKING:"; then
    BUMP_TYPE="major"
    echo -e "\033[1;33müîç Found breaking change - will bump major version\033[0m"
fi

# Determine if only docs/chore/style/test/refactor changes
if echo "$COMMIT_LOG" | grep -qiE "^(docs|chore|style|refactor|test)(\([^)]*\))?:" && \
   ! echo "$COMMIT_LOG" | grep -qi "^feat\([^)]*\):\|^feat:" && \
   ! echo "$COMMIT_LOG" | grep -qi "BREAKING CHANGE\|^BREAKING\|^[[:space:]]*BREAKING:"; then
    BUMP_TYPE="patch"
    echo -e "\033[1;33müîç Found only maintenance commits - will bump patch version\033[0m"
fi

# Update version based on the bump type
case "$BUMP_TYPE" in
    "patch")
        PATCH=$((PATCH + 1))
        ;;
    "minor")
        MINOR=$((MINOR + 1))
        PATCH=0
        ;;
    "major")
        MAJOR=$((MAJOR + 1))
        MINOR=0
        PATCH=0
        ;;
esac

# New version
NEW_VERSION="$MAJOR.$MINOR.$PATCH"

# Check if the new version is different
if [ "$VERSION" = "$NEW_VERSION" ]; then
    echo -e "\033[1;33m‚ö†Ô∏è  No version bump required.\033[0m"
fi

echo -e "\033[1;32müìà Bumping version: $VERSION -> $NEW_VERSION\033[0m"

# Create backup of package.json
cp package.json package.json.bak

# Update package.json using sed
if ! sed -i.tmp "s/\"version\": \"$VERSION\"/\"version\": \"$NEW_VERSION\"/" package.json; then
    echo -e "\033[1;31m‚ùå Error: Failed to update package.json\033[0m"
    mv package.json.bak package.json
    rm -f package.json.tmp
fi

rm -f package.json.tmp package.json.bak

# Commit the version bump
if ! git add package.json; then
    echo -e "\033[1;31m‚ùå Error: Failed to stage package.json\033[0m"
fi

if ! git commit -m "chore: bump version to $NEW_VERSION"; then
    echo -e "\033[1;31m‚ùå Error: Failed to commit version bump\033[0m"
fi

echo -e "\033[1;32m‚úÖ Successfully bumped version to $NEW_VERSION\033[0m"
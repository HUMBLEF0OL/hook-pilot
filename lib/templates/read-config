#!/bin/sh
# Purpose: Helper script to read values from hooks-config.json

# Get repository root once when script is sourced
REPO_ROOT=$(git rev-parse --show-toplevel)
CONFIG_FILE="$REPO_ROOT/hooks-config.json"

# Main function to get config value
# Usage: get_hook_config "hook_name" "key_name" "default_value"
get_hook_config() {
    if [ "$#" -lt 3 ]; then
        echo "Usage: get_hook_config <hook_name> <key_name> <default_value>" >&2
        return 1
    fi

    hook_name="$1"
    key="$2"
    default="$3"

    if [ ! -f "$CONFIG_FILE" ]; then
        echo "$default"
        return 1
    fi

    value=$(awk -v hook="$hook_name" -v key="$key" '
        # Function to clean JSON value preserving types and regex patterns
        function clean_value(str) {
            # Check if the value is a number
            if (str ~ /^[0-9]+$/ || str ~ /^[0-9]+\.[0-9]+$/) {
                return str
            }
            
            # Check if the value is a boolean
            if (str ~ /^(true|false)$/) {
                return str
            }
            
            # For strings, remove leading/trailing quotes and handle escapes
            if (str ~ /^".*"$/) {
                # Remove leading/trailing quotes
                gsub(/^"/, "", str)
                gsub(/"$/, "", str)
                
                # Handle escape sequences
                result = ""
                escape = 0
                for (i = 1; i <= length(str); i++) {
                    char = substr(str, i, 1)
                    if (escape) {
                        if (char == "\\") {
                            result = result "\\"
                        } else if (char == "\"") {
                            result = result "\""
                        } else {
                            result = result char
                        }
                        escape = 0
                    } else if (char == "\\") {
                        escape = 1
                    } else {
                        result = result char
                    }
                }
                return result
            }
            
            return str
        }

        # Process JSON content
        {
            if (content == "") {
                content = $0
            } else {
                content = content "\n" $0
            }
        }

        END {
            # Find the config section first
            config_start = index(content, "\"config\"")
            if (config_start == 0) { exit 1 }
            
            # Find the start of the hook block within config
            hook_pattern = "\""hook"\": *{"
            hook_start = match(substr(content, config_start), hook_pattern)
            if (hook_start == 0) { exit 1 }
            
            hook_start += config_start - 1
            
            # Find the matching closing brace
            brace_count = 1
            pos = hook_start
            while (brace_count > 0 && pos <= length(content)) {
                pos++
                char = substr(content, pos, 1)
                if (char == "{") brace_count++
                if (char == "}") brace_count--
            }
            
            # Extract the hook block
            hook_block = substr(content, hook_start, pos - hook_start)
            
            # Find the key and extract its value
            key_pattern = "\""key"\": *"
            key_pos = match(hook_block, key_pattern)
            if (key_pos > 0) {
                value_start = key_pos + RLENGTH
                value_str = ""
                in_quotes = 0
                escape = 0
                brace_count = 0
                bracket_count = 0
                
                for (i = value_start; i <= length(hook_block); i++) {
                    char = substr(hook_block, i, 1)

                    if (!escape) {
                        if (char == "\"") {
                            in_quotes = !in_quotes
                        } else if (char == "\\") {
                            escape = 1
                            continue
                        } else if (char == "{") {
                            brace_count++
                        } else if (char == "}") {
                            brace_count--
                        } else if (char == "[" && brace_count == 0) {
                            bracket_count++
                        } else if (char == "]" && brace_count == 0 && bracket_count > 0) {
                            bracket_count--
                            if (bracket_count == 0) break
                        } else if ((char == "," || char == "}") && !in_quotes && brace_count <= 0 && bracket_count <= 0) {
                            break
                        }
                    } else {
                        escape = 0
                    }

                    # Append only valid characters to value_str
                    if (!(char == "}" || char == "," || char == "]") || (in_quotes || bracket_count > 0)) {
                        value_str = value_str char
                    }
                }
                
                # Handle array values
                if (value_str ~ /^\[.*\]$/) {
                    # Remove square brackets and split array elements
                    gsub(/[\[\]"]/, "", value_str)
                    print value_str
                } else {
                    print clean_value(value_str)
                }
            }
        }
    ' "$CONFIG_FILE")

    # Return default if no value found
    if [ -z "$value" ]; then
        echo "$default"
    else
        echo "$value"
    fi
}

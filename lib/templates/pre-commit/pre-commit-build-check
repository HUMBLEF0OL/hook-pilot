#!/bin/sh

echo -e "\033[1müèóÔ∏è  Running Build Check...\033[0m"

rawCommandName=$(get_hook_config "pre-commit" "build_script_name" "build")
# Strip quotes and clean the command name (remove newlines and trim whitespace)
commandName=$(echo "$rawCommandName" | sed 's/^"//;s/"$//' | tr -d '\n' | xargs)

# Check if the script exists using Node.js for JSON parsing
if ! node -e "
try {
  const fs = require('fs');
  const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
  const commandName = '${commandName}';
  if (!packageJson.scripts || typeof packageJson.scripts[commandName] === 'undefined') {
    process.exit(1);
  }
  process.exit(0);
} catch (error) {
  console.error('Error checking package.json:', error.message);
  process.exit(1);
}
"; then
  echo -e "\033[33m‚ö†Ô∏è  Build command '$commandName' not found! Adding a default build command to package.json...\033[0m"

  # Add the build command to package.json using Node.js
  node -e "
try {
  const fs = require('fs');
  const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
  const commandName = '${commandName}';

  if (!packageJson.scripts) {
    packageJson.scripts = {};
  }
  packageJson.scripts[commandName] = 'echo \"No build configuration detected\" && exit 1';
  fs.writeFileSync('package.json', JSON.stringify(packageJson, null, 2));
  console.log('\u2705 Build command \"' + commandName + '\" added to package.json. Please update the build command as needed.');
} catch (error) {
  console.error('Error updating package.json:', error.message);
  process.exit(1);
}
"
  exit 1
fi

# Run build command
npm run "$commandName"
if [ $? -ne 0 ]; then
  echo -e "\033[1;31m‚ùå  Build failed. Please fix errors before committing.\033[0m"
  exit 1
fi

echo -e "\033[1;32m‚úÖ Build check passed.\033[0m"
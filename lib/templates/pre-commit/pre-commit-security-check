#!/bin/sh

RED='\033[1;31m'
GREEN='\033[1;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color
INFO='\033[1m'

echo -e "${INFO}🔒 Starting secret scanning on staged files...${NC}"

# Handle excluded files
default_excluded_files="package-lock.json"

# Get excluded files from config
excluded_files=$(get_hook_config "pre-commit" "excluded_files" "$default_excluded_files")
excluded_files=$(echo "$excluded_files" | sed 's/[[:space:]]*$//; s/^"//; s/"$//')
# Patterns as an array
patterns=(
    # AWS
    'AKIA[0-9A-Z]{16}'                        # AWS Access Key ID
    '[A-Za-z0-9/+=]{40}'                      # AWS Secret Access Key
    
    # Generic API tokens - minimum 32 chars, must include numbers and letters
    '([a-zA-Z]+[0-9]+|[0-9]+[a-zA-Z]+)[a-zA-Z0-9_\-]{30,}'  # Generic API tokens
    
    # Generic passwords and secrets - more specific patterns
    'password[\s]*=[\s]*['\''"][^'\''"]+['\''"]'    # Password assignments
    'secret[\s]*=[\s]*['\''"][^'\''"]+['\''"]'      # Secret assignments
    
    # Database connection strings - more specific patterns
    'mysql://[a-zA-Z0-9]+:[^@\s]+@[a-zA-Z0-9.-]+[0-9a-zA-Z]'  # MySQL connection strings
    'postgres://[a-zA-Z0-9]+:[^@\s]+@[a-zA-Z0-9.-]+[0-9a-zA-Z]'  # PostgreSQL connection strings
    
    # Other common patterns
    'bearer\s+[a-zA-Z0-9_\-.+/=]{16,}'        # Bearer tokens
    '[0-9a-fA-F]{32}([0-9a-fA-F]{8})?'        # MD5/SHA hashes
)

# Convert space-separated excluded files string to array
IFS=' ' read -ra excluded_files_array <<< "$excluded_files"

# Get list of staged files
staged_files=$(git diff --cached --name-only --diff-filter=ACM)

# Check if there are any staged files
if [ -z "$staged_files" ]; then
    echo -e "${YELLOW}No files are currently staged for commit.${NC}"
    exit 0
fi
found_secrets=0

# Scan each staged file
for file in $staged_files; do
    # Check if file exists (in case it was deleted)
    if [ ! -f "$file" ]; then
        continue
    fi
    
    # Skip excluded files
    skip_file=0
    for exclude_pattern in "${excluded_files_array[@]}"; do
        file_basename=$(basename "$file")
        if [[ "$file_basename" == "$exclude_pattern" ]]; then
            echo -e "${YELLOW}Skipping excluded file: $file${NC}"
            skip_file=1
            break
        fi
    done
    
    [ $skip_file -eq 1 ] && continue

    echo -e "${YELLOW}Scanning: $file${NC}"
    
    # Get staged content of the file
    staged_content=$(git show ":$file")
    
    for pattern in "${patterns[@]}"; do
        # Search for pattern in staged content
        matches=$(echo "$staged_content" | grep -P "$pattern" | grep -Pv '^[\s]*[|][-|]+[|][\s]*$' || true)
        if [ ! -z "$matches" ]; then
            # Output findings with colors
            echo -e "\n${RED}Suspicious content found in: $file${NC}"
            echo "Pattern type: $pattern"
            echo "Suspicious content:"
            echo "$matches"
            echo "----------------------------------------"
            found_secrets=$((found_secrets + 1))
        fi
    done
done

if [ $found_secrets -eq 0 ]; then
    echo -e "✅${GREEN} No secrets found in staged files.${NC}"
else
    echo -e "❌${RED} Found $found_secrets potential secrets in staged files.${NC}"
    echo -e "⚠️${YELLOW}  Please review these findings and ensure no sensitive information is being committed.${NC}"
    exit 1
fi
